{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83c\udf0c Brahma Documentation Portal Brahma creates DeFi products for the masses Please beware of anyone pretending to be from Brahma and asking for funds We will never message and ask for funds. Please join our community here. Brahma is not audited, being a bootstrapped protocol, we have planned for a third-party audit in the coming months. You can see our self-audit report, which can be found here , please don't put your money that you can't afford to lose. Introducing Brahma Brahma creates and manages a host of novel DeFi components and strategies by abstracting complexity and making DeFi accessible to the masses. Brahma's research-backed, experimental approach strives to create an \"Investverse\" starting with generating a sustained yield on top of your crypto assets. We unlock new portals for liquidity by paving way for autonomous and algorithm-led architectures.","title":"\ud83c\udf0c Brahma Documentation Portal"},{"location":"#brahma-documentation-portal","text":"Brahma creates DeFi products for the masses Please beware of anyone pretending to be from Brahma and asking for funds We will never message and ask for funds. Please join our community here. Brahma is not audited, being a bootstrapped protocol, we have planned for a third-party audit in the coming months. You can see our self-audit report, which can be found here , please don't put your money that you can't afford to lose.","title":"\ud83c\udf0c Brahma Documentation Portal"},{"location":"#introducing-brahma","text":"Brahma creates and manages a host of novel DeFi components and strategies by abstracting complexity and making DeFi accessible to the masses. Brahma's research-backed, experimental approach strives to create an \"Investverse\" starting with generating a sustained yield on top of your crypto assets. We unlock new portals for liquidity by paving way for autonomous and algorithm-led architectures.","title":"Introducing Brahma"},{"location":"Aastra/","text":"Yield instruments built on top AMMs Aastra is the first product out of Brahma's investverse. Aastra sets out to be an ecosystem of structured strategies on top of DeFi protocols, which create sustainable yield for anyone, starting with liquidity provisioning over AMM's. AASTRA-ETHPUT Our first instrument is built for users seeking to generate yield and liquidity providers aiming to use their assets more efficiently. This instrument mirrors selling put options on ETH-USDC pair by leveraging Uniswap V3's concentrated liquidity mechanism. Users are issued AASTRA-ETHPUT (ERC-20 tokens) in return for their USDC position.","title":"About"},{"location":"Aastra/#aastra-ethput","text":"Our first instrument is built for users seeking to generate yield and liquidity providers aiming to use their assets more efficiently. This instrument mirrors selling put options on ETH-USDC pair by leveraging Uniswap V3's concentrated liquidity mechanism. Users are issued AASTRA-ETHPUT (ERC-20 tokens) in return for their USDC position.","title":"AASTRA-ETHPUT"},{"location":"AastraEthput/","text":"Synthetic ETH PUT selling strategy built on Uniswap V3 The first instrument focuses on generating yield by creating synthetic short-put options on Uniswap V3, where users can participate with USDC and get exposure to ETH short put options. where L = Liquidity of the position, P = Current Price, Pu = Price at upper tick, Pl= Price at lower tick. This gives us a payoff structure which can be represented as follows: An LP's position acts as a synthetic short put option, something you can read more about here. The interesting difference to be noted is that there is no premium paid at the time of taking an LP position on Uniswap V3 as opposed to a normal short put option where you are paid the premium on sale of the option. The premiums for the LP positions are compensated via swap fees.","title":"Aastra ETH-PUT"},{"location":"AastraUserGuide/","text":"How to interact with AASTRA-ETHPUT 1 . Go to app.brahma.fi 2 . Connect with ETH Mainnet on your Metamask 3 . Make sure that you got USDC, as well as ETH to pay for gas fees. 4 . Approve the USDC for spend, as a security practice, we don't allow unlimited spending on the asset. 5 . Post the approval transaction has been validated and confirmed, click on deposit. 6 . After the confirmation on the ETH network, your deposit has been a success and the vault will start deploying the strategies. 7 . You can withdraw your positions anytime by clicking on withdraw and allowing approval and proceeding with Withdraw now.","title":"User Guide"},{"location":"Architecture/","text":"Each vault that gets deployed by us is assigned a strategy manager. Most functionalities dealing with managing funds on the vault are restricted only to the Router contract.\u200c The Router also acts as the access control for strategy managers and allows only valid addresses to manage funds of a given vault.\u200c All vaults are deployed by the Factory which acts as the single source of truth for retrieving information like the strategy manager of a vault, address of the periphery contract, etc.\u200c While the vault has basic functions, which can be used to create new liquidity positions, burn existing ones, and collect fees from Uniswap; the periphery can be used to create custom functionalities and perform multiple operations on Uniswap in one atomic transaction.\u200c The router can also be upgraded at any point, and its address updated in the factory to improve existing capabilities leveraging the basic operations already available in the vault.\u200c","title":"Architecture"},{"location":"BrahmaDAO/","text":"The goal of Brahma is to decentralize the protocol, and have the protocol run by the community in the future. As we write this, we accept that this future requires time and careful planning, as 100% decentralisation from the beginning is not possible. The DAO will be responsible for the following changes to the protocol (though we accept, that at the inception, the decision comes from the core team and the shift to a pure DAO structure will happen over time, for which the community will be updated via Brahma's communication channels): Grant/Revoke rules Deploy/Revoke new yield-bearing instruments Deploy stablecoins Add/remove incentives for the stakeholders Upgrade contracts and oracles Deploy Protocol treasury Integrate new DeFi protocols Integrate and launch on different chains Deploy/Revoke new products over the DeFi rails Employ and reimburse contributors Grants and funding to teams building on Brahma. We'll keep this section up-to-date as we move forward. You can join the #governance channel on our Discord server for more insights and discussions.","title":"Brahma DAO"},{"location":"ContractBreakdown/","text":"Contract Breakdown and Review The following vulnerability assessment is limited to the scope of following contracts of Aastra: Vault.Sol Router.Sol Factory.Sol Overview of Contracts: Vault.sol The following contract controls the access of funds deposited by users who are depositing for earning liquidity fees on Uniswap v3. It has a function that involves: - Depositing funds in Uniswap v3 for LP'ing - Claim fees from Uniswap for corresponding LP position - Swapping assets from one token to another token on Uniswap - Issuance/claim of erc20 tokens indicative of share the user holds - Movement of funds across different tick ranges of Uniswap v3 pool. Issues of Vault.sol classification of vulnerabilities guide: here Check the spec guide here Router.sol The following contract is designed to be used by the strategy managers to move their vault funds to new tick ranges. The strategy manager can easily get the state of the current vault and move funds with less complexity. The contract gets the corresponding wallet of the strategy manager using the state stored in the factory contract. Issues of Router.sol Factory.sol The following contract is designed to use by the store the state of vaults and their corresponding strategy managers. This contains important governance which can alter the state Issues of Factory.sol","title":"Contract Breakdown and Review"},{"location":"ContractBreakdown/#contract-breakdown-and-review","text":"The following vulnerability assessment is limited to the scope of following contracts of Aastra: Vault.Sol Router.Sol Factory.Sol","title":"Contract Breakdown and Review"},{"location":"ContractBreakdown/#overview-of-contracts","text":"","title":"Overview of Contracts:"},{"location":"ContractBreakdown/#vaultsol","text":"The following contract controls the access of funds deposited by users who are depositing for earning liquidity fees on Uniswap v3. It has a function that involves: - Depositing funds in Uniswap v3 for LP'ing - Claim fees from Uniswap for corresponding LP position - Swapping assets from one token to another token on Uniswap - Issuance/claim of erc20 tokens indicative of share the user holds - Movement of funds across different tick ranges of Uniswap v3 pool. Issues of Vault.sol classification of vulnerabilities guide: here Check the spec guide here","title":"Vault.sol"},{"location":"ContractBreakdown/#routersol","text":"The following contract is designed to be used by the strategy managers to move their vault funds to new tick ranges. The strategy manager can easily get the state of the current vault and move funds with less complexity. The contract gets the corresponding wallet of the strategy manager using the state stored in the factory contract. Issues of Router.sol","title":"Router.sol"},{"location":"ContractBreakdown/#factorysol","text":"The following contract is designed to use by the store the state of vaults and their corresponding strategy managers. This contains important governance which can alter the state Issues of Factory.sol","title":"Factory.sol"},{"location":"DeployedContracts/","text":"These are the contract addresses that are deployed to the Ethereum mainnet. Core Contracts v1 Contract Address Factory 0xBAD59D2BA9A532242F1287DeaBc4227E8150D074 Router 0x34511BE0a5eB24183B077682cBec5c7a9C9c5ADb Periphery 0xd47eE04a6f3c9739007D311962279eb5b2c856C5 ETH-PUT Vault 0xd47eE04a6f3c9739007D311962279eb5b2c856C5 System Roles Currently, the protocol has a few privileged roles that help bootstrap the protocol at its initial development. Role Description Governance Controls the functions which require governance. Like emergencyWithdraw during unforeseen circumstances. And creation of new vaults using createVault . Strategy Controls the movement of funds in Vault to and fro from Uniswap Pool. Router Used by strategy managers to easily move funds in a vault. User Has access to deposit and withdraw assets in Vault.","title":"Deployed Contracts"},{"location":"DeployedContracts/#core-contracts-v1","text":"Contract Address Factory 0xBAD59D2BA9A532242F1287DeaBc4227E8150D074 Router 0x34511BE0a5eB24183B077682cBec5c7a9C9c5ADb Periphery 0xd47eE04a6f3c9739007D311962279eb5b2c856C5 ETH-PUT Vault 0xd47eE04a6f3c9739007D311962279eb5b2c856C5","title":"Core Contracts v1"},{"location":"DeployedContracts/#system-roles","text":"Currently, the protocol has a few privileged roles that help bootstrap the protocol at its initial development. Role Description Governance Controls the functions which require governance. Like emergencyWithdraw during unforeseen circumstances. And creation of new vaults using createVault . Strategy Controls the movement of funds in Vault to and fro from Uniswap Pool. Router Used by strategy managers to easily move funds in a vault. User Has access to deposit and withdraw assets in Vault.","title":"System Roles"},{"location":"FAQ/","text":"Frequently asked questions about Brahma. What is Brahma? Brahma creates and manages a host of novel DeFi components and strategies by abstracting complexity and making DeFi accessible to the masses. Brahma's research-backed, experimental approach strives to create an \"Investverse\" starting with products focused on generating a non-speculative, sustained yield on crypto assets. We unlock new portals for liquidity by paving way for autonomous and algorithm-led architectures. What is Aastra? Aastra is the first product out of Brahma's investverse. It aims to create structured strategies on top of DeFi protocols to create sustainable yield for anyone, starting with liquidity provisioning over AMM's. The first instrument that went live on Aastra is AASTRA-ETHPUT. It creates a synthetic Put selling instrument on top of UNI V3, which replicates the same payoff structure as selling a put option. How does Aastra work? \u27a1\ufe0f User Guide A user deposits USDC to the instrument and our autonomous contracts execute the trades (selecting the range order, strike price and rebalance dates) as per our parameterization. Are you audited? No, we are not audited yet. We have performed an extensive self audit on our contracts, which you can see in our audit report here . Is there any risk? There are couple of risks associated with the strategies, contracts and platforms. Strategies are tested but do not guarantee future results. There might be some risks in the smart contracts and thus we advise caution when you are interacting with them, please check the Self audit report available here. We are building on top of major DeFi platforms and there can be a problem with the 3rd party code and contracts, please do your own research before putting money in the smart contract. Is there a token available? No, we don't have a token yet. Did you have any private or public sale? No, we didn't have any fundraising event yet.","title":"FAQ"},{"location":"FAQ/#what-is-brahma","text":"Brahma creates and manages a host of novel DeFi components and strategies by abstracting complexity and making DeFi accessible to the masses. Brahma's research-backed, experimental approach strives to create an \"Investverse\" starting with products focused on generating a non-speculative, sustained yield on crypto assets. We unlock new portals for liquidity by paving way for autonomous and algorithm-led architectures.","title":"What is Brahma?"},{"location":"FAQ/#what-is-aastra","text":"Aastra is the first product out of Brahma's investverse. It aims to create structured strategies on top of DeFi protocols to create sustainable yield for anyone, starting with liquidity provisioning over AMM's. The first instrument that went live on Aastra is AASTRA-ETHPUT. It creates a synthetic Put selling instrument on top of UNI V3, which replicates the same payoff structure as selling a put option.","title":"What is Aastra?"},{"location":"FAQ/#how-does-aastra-work","text":"\u27a1\ufe0f User Guide A user deposits USDC to the instrument and our autonomous contracts execute the trades (selecting the range order, strike price and rebalance dates) as per our parameterization.","title":"How does Aastra work?"},{"location":"FAQ/#are-you-audited","text":"No, we are not audited yet. We have performed an extensive self audit on our contracts, which you can see in our audit report here .","title":"Are you audited?"},{"location":"FAQ/#is-there-any-risk","text":"There are couple of risks associated with the strategies, contracts and platforms. Strategies are tested but do not guarantee future results. There might be some risks in the smart contracts and thus we advise caution when you are interacting with them, please check the Self audit report available here. We are building on top of major DeFi platforms and there can be a problem with the 3rd party code and contracts, please do your own research before putting money in the smart contract.","title":"Is there any risk?"},{"location":"FAQ/#is-there-a-token-available","text":"No, we don't have a token yet.","title":"Is there a token available?"},{"location":"FAQ/#did-you-have-any-private-or-public-sale","text":"No, we didn't have any fundraising event yet.","title":"Did you have any private or public sale?"},{"location":"Glossary/","text":"Term Description User Anyone who is interacting with Brahma protocol's product. LP LP's refer to Liquidity provisioning in order to generate rewards. Anyone depositing Liquidity in a pool can do so by supplying crypto assets. These assets are in-turn used by a protocol to lend, trade, mint etc and generate yield in return. UNI V3 UNI V3 refers to the Uniswap's version 3 upgrade. More details can be found here Strategy Refer to smart contract strategies to generate yield or hedge capital. The Strategies are implemented by the Brahma vaults to autonomously manage capital. AASTRA An Aastra (Sanskrit: \u0905\u0938\u094d\u0924\u094d\u0930) was a supernatural weapon and also the first set of products launched under Brahma. BRAHMA (Sanskrit: \u092c\u094d\u0930\u0939\u094d\u092e\u093e, romanized: Brahm\u0101 ) Means the creator of the universe. Brahma is the first god in the Hindu triumvirate. The triumvirate consists of three gods who are responsible for the creation . AASTRA-ETHPUT ERC-20 token issued by the AASTRA. It represents the share the user has in the vault and minted when supplied with USDC.","title":"Glossary"},{"location":"GovernanceAndFundControl/","text":"Brahma will ultimately be governed by its community, via forum discussions and proposals held on the Brahma snapshot (to be established in the future)\u200c Operations Multi-signature Any changes that are within the purview of the core team, such as re-balancing, administration of pools and in some cases emergency withdrawal (Link here) must pass the Operations Multisig with at least 3 signatures. These members are the part of the core team, and are geographically distributed : @0xdanzu @BapireddyK @thesoberguy13 @defishiva @jainargh\u200c @daestair_ Development Fund This section will be updated in the future\u200c","title":"Governance and fund Control"},{"location":"GovernanceAndFundControl/#operations-multi-signature","text":"Any changes that are within the purview of the core team, such as re-balancing, administration of pools and in some cases emergency withdrawal (Link here) must pass the Operations Multisig with at least 3 signatures. These members are the part of the core team, and are geographically distributed : @0xdanzu @BapireddyK @thesoberguy13 @defishiva @jainargh\u200c @daestair_","title":"Operations Multi-signature"},{"location":"GovernanceAndFundControl/#development-fund","text":"This section will be updated in the future\u200c","title":"Development Fund"},{"location":"Research/","text":"This is the mecca for nerds, we publish our research and findings in this section https://blog.brahma.fi","title":"\ud83e\udd13 Research"},{"location":"ResearchOnSimilarProtocols/","text":"We like how protocols like Visor Finance and Popsicle Finance have built some initial automated vaults for managing lp positions on Uniswap v3. As they are first movers in this direction, they faced a few challenges in their initial implementation. Here we go over a few of them and provide details on how Aastra prevents them.\u200c Visor Finance Hack Someone was able to get access to emergencyWithdraw function and withdrew the user funds deposited in HyperVisor vault. Visor Finance has refunded users post hack. This hack could have been prevented if the governance was multi-sig based, decreasing the chances for this hack. More details about the hack can be found here .\u200b\u200c Popsicle Finance Hack Popsicle finance had a functionality in their vaults where users could withdraw the fees earned from their underlying uniswap v3 positions. The exploit happened due to reward debt not being transferred when lp tokens are transferred. So the hacker was able to earn large share of fees using same lp tokens by transferring the lp tokens to multiple wallets. This introduced the problem of double spending. More details about the hack can be found here .\u200c Our Approach Starting from the deployment of our first vaults, we are using a gnosis multi-sig shared across ...... for the governance account of protocol. This reduce any individual malicious attacker from accessing the governance account. The current architecture of Aastra vaults doesn't give users direct access to the fees earned from their lp position. Instead user's can access funds that are invested in lp position or lying ideal in vault. This prevents the need to maintain state of fees so when lp tokens are transferred their is no change in state. And if there is a withDraw call made shares are burned mitigating the issue of double spend to happen in first place.","title":"Research on similar protocol vulnerabilities"},{"location":"ResearchOnSimilarProtocols/#visor-finance-hack","text":"Someone was able to get access to emergencyWithdraw function and withdrew the user funds deposited in HyperVisor vault. Visor Finance has refunded users post hack. This hack could have been prevented if the governance was multi-sig based, decreasing the chances for this hack. More details about the hack can be found here .\u200b\u200c","title":"Visor Finance Hack"},{"location":"ResearchOnSimilarProtocols/#popsicle-finance-hack","text":"Popsicle finance had a functionality in their vaults where users could withdraw the fees earned from their underlying uniswap v3 positions. The exploit happened due to reward debt not being transferred when lp tokens are transferred. So the hacker was able to earn large share of fees using same lp tokens by transferring the lp tokens to multiple wallets. This introduced the problem of double spending. More details about the hack can be found here .\u200c","title":"Popsicle Finance Hack"},{"location":"ResearchOnSimilarProtocols/#our-approach","text":"Starting from the deployment of our first vaults, we are using a gnosis multi-sig shared across ...... for the governance account of protocol. This reduce any individual malicious attacker from accessing the governance account. The current architecture of Aastra vaults doesn't give users direct access to the fees earned from their lp position. Instead user's can access funds that are invested in lp position or lying ideal in vault. This prevents the need to maintain state of fees so when lp tokens are transferred their is no change in state. And if there is a withDraw call made shares are burned mitigating the issue of double spend to happen in first place.","title":"Our Approach"},{"location":"SecurityReports/","text":"The contracts source code can be found here Slither Report The slither tool checks for common reentrancy and false positive solidity bugs. No major bugs were found in the contract after the self-audit report. Code Coverage Report All the public functions of our contracts are unit tested. The Unit tests also covered multiple branching conditions which were close to real user scenarios Dependency Graph The above diagram covers how each contract and their functions are connected to each other.","title":"Security Reports for our Contracts"},{"location":"SelfAudit/","text":"Brahma represents a suite of open-source products that aims to generate yield and increase capital efficiency in the DeFi ecosystem. The first set of smart contracts are being launched under AASTRA. AASTRA aims to generate structured yield on top of AMMs via liquidity provisioning, starting with Uniswap V3. With this in mind, the development of AASTRA has happened in stages, the rollout will happen in stages, so as to control any unforeseen security concerns and corner cases. Brahma has tried to implement and create a new standard for protocols for self-auditing and peer review, before the commercial audits. Description from the Users Point of View A typical DeFi user will be using Aastra instruments by depositing their stable coins and get exposure to different assets (including synths in the future) and positions to earn a yield. The UX is similar to Yearn vaults and Token sets. Tokens and Platforms used for V1 Platforms interacted with: Uniswap V3 both the core contracts (here) and periphery contracts (here) Tokens issued: Aastra issues ERC-20 based tokens on user's shares in a yield Instrument. ERC-20 standard used (Github) Executive Overview Auditors: Bapireddy Karri, 0xKali Type: Put Selling Strategies Timeline: The audit was started on 1/9/21 done on commit id ee73ee8ba7417a9c208035d2f97d788cb54ca630 on repository https://github.com/Brahma-fi/aastra EVM: London Languages: Solidity, Python, JS Method: All the public functions of contracts are documented with natspec specification and unit tested. You can check the code-coverage reporting here . Other than this the contract is tested for re-entrancy bugs and buffer overflow attacks using slither . You can check the report for this here (github link). Along with this the team has tested the contracts on the previous hack that happened on other protocols with similar architecture. All the issues found during such comparison are shared link Tools used: Slither, Surya, MythX, DOT Source Code: https://github.com/Brahma-fi/aastra Total Issues: 14 (2 High + 3 Critical + 6 Medium + 3 Low) Governance: 0x48AC9CAd3DA5752eB1276d650BF321342dF6cd0c Peer Reviews: In progress","title":"Self Audit"},{"location":"SelfAudit/#description-from-the-users-point-of-view","text":"A typical DeFi user will be using Aastra instruments by depositing their stable coins and get exposure to different assets (including synths in the future) and positions to earn a yield. The UX is similar to Yearn vaults and Token sets.","title":"Description from the Users Point of View"},{"location":"SelfAudit/#tokens-and-platforms-used-for-v1","text":"Platforms interacted with: Uniswap V3 both the core contracts (here) and periphery contracts (here) Tokens issued: Aastra issues ERC-20 based tokens on user's shares in a yield Instrument. ERC-20 standard used (Github)","title":"Tokens and Platforms used for V1"},{"location":"SelfAudit/#executive-overview","text":"Auditors: Bapireddy Karri, 0xKali Type: Put Selling Strategies Timeline: The audit was started on 1/9/21 done on commit id ee73ee8ba7417a9c208035d2f97d788cb54ca630 on repository https://github.com/Brahma-fi/aastra EVM: London Languages: Solidity, Python, JS Method: All the public functions of contracts are documented with natspec specification and unit tested. You can check the code-coverage reporting here . Other than this the contract is tested for re-entrancy bugs and buffer overflow attacks using slither . You can check the report for this here (github link). Along with this the team has tested the contracts on the previous hack that happened on other protocols with similar architecture. All the issues found during such comparison are shared link Tools used: Slither, Surya, MythX, DOT Source Code: https://github.com/Brahma-fi/aastra Total Issues: 14 (2 High + 3 Critical + 6 Medium + 3 Low) Governance: 0x48AC9CAd3DA5752eB1276d650BF321342dF6cd0c Peer Reviews: In progress","title":"Executive Overview"},{"location":"Socials/","text":"\ud83d\udc26 Follow us on Twitter \ud83e\udd16 Join us on Discord \ud83d\udcda Read our Blogs \ud83d\udcbb Follow us on Github","title":"Connect with us!"},{"location":"TestApproachAndMethodology/","text":"Aastra is a set of open-source smart contracts designed to simplify the launch of market-making strategy vaults on uniswap v3. Aastra aims to improve the yield earned by liquidity providers by abstracting out the market-making strategies execution using vault structure. Using this as our starting point there are 3 stakeholders involved in the interaction of contracts. Users who deposit their funds to be used for liquidity provision on uniswap v3. Strategy Manager who moves the user deposited funds across uniswapv3 lp position. Aastra protocol governs the vault funds to ensure the safety of funds. The vulnerability assessment is limited to the scope of the following Contracts of Aastra: Vault.Sol Router.Sol Factory.Sol The following phases and tools were used by us during this self audit: \u2705 Research into architecture, purpose, and use of ERC20 Token. \u2705 Smart Contract manual code read and walkthrough. \u2705 Graphing out functionality and contract logic/connectivity/functions (surya) \u2705 Manual Assessment of use and safety for the critical solidity variables and functions in scope to identify any arithmetic related vulnerability classes. \u2705 Scanning of solidity files for vulnerabilities, security hotspots, or bugs. (MythX) \u2705 Static Analysis of security for scoped contract, and imported functions. (Slither) \u2705 Testnet deployment (Hardhat, Ethersjs, Infura)","title":"Test Approach and Methodology"}]}